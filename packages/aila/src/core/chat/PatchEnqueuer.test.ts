// Generated by CodiumAI
import { PatchEnqueuer } from "./PatchEnqueuer";

describe("PatchEnqueuer", () => {
  // enqueuePatch should encode and enqueue a valid patch
  it("should encode and enqueue a valid patch when value is provided", async () => {
    const controller = {
      enqueue: jest.fn(),
    } as unknown as ReadableStreamDefaultController;

    const patchEnqueuer = new PatchEnqueuer(controller);
    const path = "/test/path";
    const value = { key: "value" };

    await patchEnqueuer.enqueuePatch(path, value);

    expect(controller.enqueue).toHaveBeenCalled();
    const expectedPatch = `\n␞\n${JSON.stringify({
      type: "patch",
      reasoning: "generated",
      value: { op: "add", path, value },
      status: "complete",
    })}\n␞\n`;
    expect(controller.enqueue).toHaveBeenCalledWith(expectedPatch);
  });

  // enqueuePatch should handle null or undefined value gracefully
  // it("should not enqueue a patch when value is null or undefined", async () => {
  //   const controller = {
  //     enqueue: jest.fn(),
  //   } as unknown as ReadableStreamDefaultController;

  //   const patchEnqueuer = new PatchEnqueuer(controller);
  //   const path = "/test/path";

  //   expect(async () => await patchEnqueuer.enqueuePatch(path, null)).toThrow(
  //     "Value must be provided to enqueue a patch",
  //   );
  //   expect(
  //     async () => await patchEnqueuer.enqueuePatch(path, undefined),
  //   ).toThrow("Value must be provided to enqueue a patch");

  //   expect(controller.enqueue).not.toHaveBeenCalled();
  // });
});
