import OpenAI from "openai";
import { z } from "zod";

import type { ImageCycle } from "../router/imageGen";

export interface ValidationResult {
  isValid: boolean;
  metadata: {
    imageContent: string;
    promptUsed: string;
    appropriatenessScore: number;
    validationReasoning: string;
    copyrightConcerns: string;
  };
}

function isTheImageBase64(url: string) {
  const base64Regex = /^data:image\/(png|jpe?g|gif);base64,/;
  if (base64Regex.test(url)) {
    return `f"data:image/jpeg;base64,${url}`;
  }
  return url;
}

type CopyrightInfringementCheckerResult = {
  imageContent: string;
  prompt: string;
  copyRightInfringement: boolean;
  copyrightConcerns: string;
};

export async function copyrightInfringementCheckerWithOpenAI(
  imageUrl: string,
  prompt: string,
  lessonTitle: string,
  keyStage: string,
  subject: string,
  cycleInfo: ImageCycle | null,
  isGeneratedImage: boolean,
): Promise<CopyrightInfringementCheckerResult> {
  console.log(`[OpenAI Validation] Starting validation for image: ${imageUrl}`);
  console.log(`[OpenAI Validation] Prompt: ${prompt}`);

  try {
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
      baseURL: process.env.HELICONE_EU_HOST,
    });

    console.log("[OpenAI Validation] Sending request to OpenAI");

    const systemPrompt =
      "You are a copyright expert. You are given an image and a prompt. You need to determine if the image is copyright infringing. " +
      "This image is going to be distributed by your organisation and you need to make sure it is not infringing on any copyrights. " +
      "The image has been generated by an AI model so has the possibility of containing copyrighted elements. " +
      "You must check for copyright infringement, especially for recognizable characters from books, films, TV shows, video games, or other media. Any of those are a copyright infringement. " +
      "The most common culprits are characters from books, films, TV shows, video games, or other media. " +
      "The JSON should have the following structure:\n" +
      `{
                            "imageContent": "Description of the image content",
                            "prompt": "The provided prompt",
                            "copyRightInfringement": true or false,
                            "copyrightConcerns": "Identify any recognizable characters, settings, or distinctive elements from copyrighted works (books, films, TV shows, etc.). If none are present, state 'No copyright concerns identified'. If present, list the specific characters/elements and their source media.",
                        }`;

    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: systemPrompt,
        },
        {
          role: "user",
          content: [
            {
              type: "text",
              text: `Prompt: "${prompt}"\n Lesson Title: "${lessonTitle}\n keyStage: "${keyStage}" \n subject: "${subject}" Analyze this image and determine if it's copyright infringing.`,
            },
            {
              type: "image_url",
              image_url: {
                url: isTheImageBase64(imageUrl),
              },
            },
          ],
        },
      ],
      temperature: 0.2,
    });

    const fullResponse = response?.choices?.[0]?.message?.content?.trim() || "";
    console.log(
      `[OpenAI Validation] Full validation response:\n${fullResponse}`,
    );

    const jsonStart = fullResponse.indexOf("{");
    const jsonEnd = fullResponse.lastIndexOf("}");
    if (jsonStart === -1 || jsonEnd === -1) {
      throw new Error(
        "[OpenAI Validation] Response does not contain valid JSON.",
      );
    }
    const jsonResponse = fullResponse.slice(jsonStart, jsonEnd + 1);
    const responseSchema = z.object({
      imageContent: z.string().optional(),
      prompt: z.string().optional(),
      copyRightInfringement: z.boolean().optional(),
      copyrightConcerns: z.string().optional(),
    });
    const parsedResponse = responseSchema.parse(JSON.parse(jsonResponse));

    return {
      imageContent: parsedResponse.imageContent || "",
      prompt: parsedResponse.prompt || "",
      copyRightInfringement: parsedResponse.copyRightInfringement || false,
      copyrightConcerns: parsedResponse.copyrightConcerns || "",
    };
  } catch (error) {
    console.error("[OpenAI Validation] Error during validation:", error);
    throw new Error(`[OpenAI Validation] Validation failed: ${error}`);
  }
}
