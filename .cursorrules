You are an expert in TypeScript, React, Next.js, tRPC, Zustand, Tailwind CSS, and Turborepo monorepo architecture.

This is the monorepo for Aila, Oak National Academy's AI assistant.

TECHNOLOGY STACK

Frontend:

- Framework: Next.js with App Router
- Language: TypeScript (strict mode)
- UI Components: Primarily custom components from Oak's shared component library
- Styling: Tailwind CSS
- State Management:
  - Zustand for complex state (chat, lesson plan, moderation)
  - React hooks for component state
  - tRPC for data fetching and mutations

Backend:

- Architecture: tRPC API endpoints for type-safe client-server communication
- Language: TypeScript (strict mode)
- Database: Prisma ORM with PostgreSQL
- AI Integration: OpenAI, Langchain, Claude
- Authentication: Clerk

Deployment:

- Vercel

CODING STYLE

General Principles:

- Write concise, technical TypeScript code
- Use functional, declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names (e.g., isLoading, hasError)
- Follow "use client" pattern correctly for Next.js App Router

Formatting:

- Use 2-space indentation
- 80 character line width limit
- Double quotes for strings
- Include trailing commas
- Sort imports: React → Third-party → Project → Relative

TypeScript Usage:

- Use strict typing with noUncheckedIndexedAccess
- Prefer interfaces over types for object shapes
- Use type for complex types or unions
- Avoid enums; use string literal unions or const objects instead
- Always handle Promise rejections with @typescript-eslint/no-floating-promises rule
- Use consistent type imports (@typescript-eslint/consistent-type-imports)

Component Structure:

- Use functional components with React hooks
- Prefer named exports for components
- Add "use client" directive to client components
- Structure files: exported component, subcomponents, helpers, types
- Keep components focused on a single responsibility

tRPC Implementation:

- Use type-safe end-to-end communication
- Implement proper error handling in tRPC procedures
- Follow the project's router organization
- Use appropriate middleware (auth, rate limiting)

Error Handling:

- Handle errors and edge cases early in functions with guard clauses
- Use early returns for error conditions to avoid nesting
- Implement proper error logging and user-friendly messages
- Always handle Promise rejections using await or .catch()

Testing:

- Write Jest unit tests for utility functions and hooks
- Use Playwright for E2E testing
- Follow the project's test patterns and mocking strategies

MONOREPO ORGANIZATION

- Follow the established package structure:
  - apps/nextjs: Main Next.js application
  - packages/aila: Core AI assistant functionality
  - packages/api: tRPC API endpoints and routers
  - packages/core: Shared business logic and models
  - packages/db: Prisma schema and database access
  - packages/exports: Document export functionality
  - packages/logger: Structured logging utilities

NAMING CONVENTIONS

- PascalCase for component names, type names, and interfaces
- camelCase for variables, functions, and properties
- Use lowercase with dashes for directory names (kebab-case)
- For hooks, always prefix with "use" (e.g., useAnalytics)
- For Zustand store files, follow the established pattern with selectors and types

PERFORMANCE OPTIMIZATION

- Minimize client-side JavaScript with strategic "use client" usage
- Use React Server Components where possible
- Implement proper data fetching strategies with tRPC
- Use React.memo() for expensive renders when needed
- Dynamic imports for code splitting
- Optimize images with Next.js Image component
- Consider Web Vitals in UI implementations

SECURITY BEST PRACTICES

- Never expose sensitive data in client-side code
- Validate all user inputs, both client and server-side
- Implement proper authentication and authorization checks with Clerk
- Use tRPC's type safety for data validation
- Protect against rate limiting in sensitive endpoints

<cursor-tools Integration>
# Instructions
Use the following commands to get AI assistance:

**Web Search:**
`cursor-tools web "<your question>"` - Get answers from the web using Perplexity AI (e.g., `cursor-tools web "latest weather in London"`)
when using web for complex queries suggest writing the output to a file somewhere like local-research/<query summary>.md.

**Repository Context:**
`cursor-tools repo "<your question>"` - Get context-aware answers about this repository using Google Gemini (e.g., `cursor-tools repo "explain authentication flow"`)

**Documentation Generation:**
`cursor-tools doc [options]` - Generate comprehensive documentation for this repository (e.g., `cursor-tools doc --output docs.md`)
when using doc for remote repos suggest writing the output to a file somewhere like local-docs/<repo-name>.md.

**GitHub Information:**
`cursor-tools github pr [number]` - Get the last 10 PRs, or a specific PR by number (e.g., `cursor-tools github pr 123`)
`cursor-tools github issue [number]` - Get the last 10 issues, or a specific issue by number (e.g., `cursor-tools github issue 456`)

**Browser Automation (Stateless):**
`cursor-tools browser open <url> [options]` - Open a URL and capture page content, console logs, and network activity (e.g., `cursor-tools browser open "https://example.com" --html`)
`cursor-tools browser act "<instruction>" --url=<url> [options]` - Execute actions on a webpage using natural language instructions (e.g., `cursor-tools browser act "Click Login" --url=https://example.com`)
`cursor-tools browser observe "<instruction>" --url=<url> [options]` - Observe interactive elements on a webpage and suggest possible actions (e.g., `cursor-tools browser observe "interactive elements" --url=https://example.com`)
`cursor-tools browser extract "<instruction>" --url=<url> [options]` - Extract data from a webpage based on natural language instructions (e.g., `cursor-tools browser extract "product names" --url=https://example.com/products`)

**Notes on Browser Commands:**

- All browser commands are stateless: each command starts with a fresh browser instance and closes it when done.
- When using `--connect-to`, special URL values are supported:
  - `current`: Use the existing page without reloading
  - `reload-current`: Use the existing page and refresh it (useful in development)
- Multi step workflows involving state or combining multiple actions are supported in the `act` command using the pipe (|) separator (e.g., `cursor-tools browser act "Click Login | Type 'user@example.com' into email | Click Submit" --url=https://example.com`)
- Video recording is available for all browser commands using the `--video=<directory>` option. This will save a video of the entire browser interaction at 1280x720 resolution. The video file will be saved in the specified directory with a timestamp.
- DO NOT ask browser act to "wait" for anything, the wait command is currently disabled in Stagehand.

**Tool Recommendations:**

- `cursor-tools web` is best for general web information not specific to the repository.
- `cursor-tools repo` is ideal for repository-specific questions, planning, code review and debugging.
- `cursor-tools doc` generates documentation for local or remote repositories.
- `cursor-tools browser` is useful for testing and debugging web apps.

**Running Commands:**

1. **Installed version:** Use `cursor-tools <command>` (if in PATH) or `npm exec cursor-tools "<command>"`, `yarn cursor-tools "<command>"`, `pnpm cursor-tools "<command>"`.
2. **Without installation:** Use `npx -y cursor-tools@latest "<command>"` or `bunx -y cursor-tools@latest "<command>"`.

**General Command Options (Supported by all commands):**
--model=<model name>: Specify an alternative AI model to use
--max-tokens=<number>: Control response length
--save-to=<file path>: Save command output to a file (in _addition_ to displaying it)
--help: View all available options (help is not fully implemented yet)

**Documentation Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Generate documentation for a remote GitHub repository

**GitHub Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Access PRs/issues from a specific GitHub repository

**Browser Command Options (for 'open', 'act', 'observe', 'extract'):**
--console: Capture browser console logs (enabled by default, use --no-console to disable)
--html: Capture page HTML content
--network: Capture network activity (enabled by default, use --no-network to disable)
--screenshot=<file path>: Save a screenshot of the page
--timeout=<milliseconds>: Set navigation timeout (default: 30000ms)
--viewport=<width>x<height>: Set viewport size (e.g., 1280x720). When using --connect-to, viewport is only changed if this option is explicitly provided
--headless: Run browser in headless mode (default: true)
--no-headless: Show browser UI (non-headless mode) for debugging
--connect-to=<port>: Connect to existing Chrome instance
--wait=<duration or selector>: Wait after page load (e.g., '5s', '#element-id', 'selector:.my-class')
--video=<directory>: Save a video recording of the browser interaction to the specified directory (1280x720 resolution). Not available when using --connect-to

**Additional Notes:**

- For detailed information, see `node_modules/cursor-tools/README.md` (if installed locally).
- Configuration is in `cursor-tools.config.json` (or `~/.cursor-tools/config.json`).
- API keys are loaded from `.cursor-tools.env` (or `~/.cursor-tools/.env`).
- Browser commands require separate installation of Playwright: `npm install --save-dev playwright` or `npm install -g playwright`.
- **Remember:** You're part of a team of superhuman expert AIs. Work together to solve complex problems.
  <!-- cursor-tools-version: 0.5.0 -->
  </cursor-tools Integration>
